plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    //'org.springframework.boot:spring-boot-starter-data-jpa' 는
    //Spring Framework에서 제공하는 JPA라이브러리입니다
    //이 라이브러리를 사용하기 위해 아래와 같이 implementation을 작성해서 구성해줘야 합니다
    //implementation의 의민는 이 라이브러리를 사용할 때
    //컴파일 시에도 라이브러리를 사용해서 다른 코드가 참조할 수 있게 만들어 주세요
    //컴파일 시 라는 것의 의미는 Java컴파일러의 구동 방식과 롼련이 있음
    //기본적으로 Java코드는 JVM이라는 가상 머신이 있고
    //Java Compiler라는 녀석이 함께 구동하여 코드를 동작시키게 됩니다
    //JVM은 Java Compiler가 Java코드를 ByteCode라는 형태로 작성
    //이 ByteCode를 JVM이라는 가상 머신이 읽어서 기계어로 바꿈
    //여기서 기계어는 실제컴퓨터가 보는 010101011rkxdmsrjt
    //Java Compiler가 여러분들이 작성한 Java 코드 뿐만 아니고
    //아래와 같은 implementation 사항들을 함께 읽어서 ByteCode로 구성함
    //그러므로implementation 키워드를 붙여서
    //JVM이 JPA 라이브러리와 함꼐 동작할 수 있도록 만들어 줬다 볼 수 있습니다

    //ByteCode는 Java Compiler가 만들어 놓은 파일 입니다
    //프로그램 실행 상황에서 우리가 눈으로 가시적으로 볼 수는 없습니다.
    //여러분들이 플레이 버튼을 눌러서 실행 할 때 내부적으로 진행되는 작업

    //JVM이라는 가상 머신은 ByteCode를 실제로 읽을 수 있는 시스템 내부의 요소
    //플레이 버튼을 누르면 Java Compiler가 ByteCode를 작성하고
    //JVM이 이 ByteCode를 읽어서 01010110 같은 기계어 를 만들면서 코드가 동작함

    //Compiler는 여러분들이 작성한 소스 코드
    //혹은 다른 사람들이 작성한 소스 코드 또는 Spring 프레임 워크 작성자들이 만든 소스코드
    //위와 같은 소스 코드들을 입력하여 ByteCode 혹은 기께어를 만들어 내는 소프트 웨어
    //컴퓨터와 인간 사이의 번역기라는 말과 동일함

    //코끼리 아이콘이 나올때가 있는데 이는 build.gradle에 변경이 발생한것


    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    //런타임 에만 필요한 녀석
    //런타임이란 프로그램이 동작하고 있는 상황 자체를 런타임이라 한다
    //위의 상황에서와 같이 Java Compiler가 코드를 컴파일 하는
//    runtimeOnly ' com.mysql:mysql-connector-j'

    runtimeOnly 'com.h2database:h2'
    testImplementation 'com.h2database:h2'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}
